// Environmental Data Service
// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞, —É–≥–ª–µ—Ä–æ–¥–Ω–æ–º —Å–ª–µ–¥–µ –∏ –¥—Ä—É–≥–∏—Ö —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö

// API Keys - –∑–∞–º–µ–Ω–∏—Ç–µ 'demo' –Ω–∞ –≤–∞—à–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã
// –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ environment variables –∏–ª–∏ React Native Config
const WAQI_API_KEY = 'baa800788dfc1c8f21bcc4a75e6b85cdc0816ca6'; // üîë –ó–ê–ú–ï–ù–ò–¢–ï: –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ aqicn.org/data-platform/token/
const OPENAQ_API_KEY = ''; // üîë –û–ü–¶–ò–û–ù–ê–õ–¨–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ openaq.org
const OPENAQ_API_BASE = 'https://api.openaq.org/v2';
const WAQI_API_BASE = 'https://api.waqi.info';

// –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
// const WAQI_API_KEY = process.env.WAQI_API_KEY || 'demo';
// const OPENAQ_API_KEY = process.env.OPENAQ_API_KEY || '';

export interface AirQualityData {
  aqi: number;
  city: string;
  dominentpol: string;
  pollution: {
    pm25?: number;
    pm10?: number;
    o3?: number;
    no2?: number;
    so2?: number;
    co?: number;
  };
  timestamp: string;
  status: 'good' | 'moderate' | 'unhealthy_sg' | 'unhealthy' | 'very_unhealthy' | 'hazardous';
}

export interface CarbonFootprintData {
  transport: number;
  energy: number;
  total: number;
  unit: 'kg_co2' | 'tons_co2';
}

export interface LocationData {
  latitude: number;
  longitude: number;
  city?: string;
}

class EnvironmentalDataService {
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
  async getAirQuality(location?: LocationData): Promise<AirQualityData | null> {
    try {
      let url: string;
      
      if (location) {
        // –ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        url = `${WAQI_API_BASE}/feed/geo:${location.latitude};${location.longitude}/?token=${WAQI_API_KEY}`;
      } else {
        // –ü–æ–∏—Å–∫ –ø–æ IP (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏)
        url = `${WAQI_API_BASE}/feed/here/?token=${WAQI_API_KEY}`;
      }
      
      const response = await fetch(url);
      const data = await response.json();
      
      if (data.status !== 'ok' || !data.data) {
        throw new Error('Failed to fetch air quality data');
      }
      
      const aqiValue = data.data.aqi;
      const pollution = data.data.iaqi || {};
      
      return {
        aqi: aqiValue,
        city: data.data.city?.name || 'Unknown Location',
        dominentpol: data.data.dominentpol || 'pm25',
        pollution: {
          pm25: pollution.pm25?.v,
          pm10: pollution.pm10?.v,
          o3: pollution.o3?.v,
          no2: pollution.no2?.v,
          so2: pollution.so2?.v,
          co: pollution.co?.v,
        },
        timestamp: data.data.time?.s || new Date().toISOString(),
        status: this.getAQIStatus(aqiValue),
      };
    } catch (error) {
      console.error('Error fetching air quality data:', error);
      return null;
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
  async getAirQualityForCity(cityName: string): Promise<AirQualityData | null> {
    try {
      const url = `${WAQI_API_BASE}/feed/${encodeURIComponent(cityName)}/?token=${WAQI_API_KEY}`;
      const response = await fetch(url);
      const data = await response.json();
      
      if (data.status !== 'ok' || !data.data) {
        throw new Error(`Failed to fetch air quality data for ${cityName}`);
      }
      
      const aqiValue = data.data.aqi;
      const pollution = data.data.iaqi || {};
      
      return {
        aqi: aqiValue,
        city: data.data.city?.name || cityName,
        dominentpol: data.data.dominentpol || 'pm25',
        pollution: {
          pm25: pollution.pm25?.v,
          pm10: pollution.pm10?.v,
          o3: pollution.o3?.v,
          no2: pollution.no2?.v,
          so2: pollution.so2?.v,
          co: pollution.co?.v,
        },
        timestamp: data.data.time?.s || new Date().toISOString(),
        status: this.getAQIStatus(aqiValue),
      };
    } catch (error) {
      console.error(`Error fetching air quality data for ${cityName}:`, error);
      return null;
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É–≥–ª–µ—Ä–æ–¥–Ω–æ–≥–æ —Å–ª–µ–¥–∞ (–¥–ª—è –¥–µ–º–æ)
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å CarbonSutra API
  async getCarbonFootprint(activities: {
    transport?: number; // –∫–º –≤ –¥–µ–Ω—å
    energy?: number; // –∫–í—Ç‚ãÖ—á –≤ –º–µ—Å—è—Ü
    flights?: number; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–ª–µ—Ç–æ–≤ –≤ –≥–æ–¥
  }): Promise<CarbonFootprintData> {
    try {
      // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –¥–µ–º–æ
      const transportCO2 = (activities.transport || 0) * 0.21 * 365; // –∫–≥ CO2 –≤ –≥–æ–¥
      const energyCO2 = (activities.energy || 0) * 0.5 * 12; // –∫–≥ CO2 –≤ –≥–æ–¥
      const flightsCO2 = (activities.flights || 0) * 1000; // –∫–≥ CO2 –≤ –≥–æ–¥ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
      
      const total = transportCO2 + energyCO2 + flightsCO2;
      
      return {
        transport: transportCO2,
        energy: energyCO2 + flightsCO2,
        total: total,
        unit: 'kg_co2',
      };
    } catch (error) {
      console.error('Error calculating carbon footprint:', error);
      return {
        transport: 0,
        energy: 0,
        total: 0,
        unit: 'kg_co2',
      };
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  async getGlobalEnvironmentalStats(): Promise<{
    globalAirQuality: number;
    citiesMonitored: number;
    co2Levels: number;
    forestCoverage: number;
  }> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π
      return {
        globalAirQuality: 85,
        citiesMonitored: 8469,
        co2Levels: 418.5,
        forestCoverage: 31.0,
      };
    } catch (error) {
      console.error('Error fetching global environmental stats:', error);
      return {
        globalAirQuality: 85,
        citiesMonitored: 8469,
        co2Levels: 418.5,
        forestCoverage: 31.0,
      };
    }
  }
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ –ø–æ AQI
  private getAQIStatus(aqi: number): AirQualityData['status'] {
    if (aqi <= 50) return 'good';
    if (aqi <= 100) return 'moderate';
    if (aqi <= 150) return 'unhealthy_sg';
    if (aqi <= 200) return 'unhealthy';
    if (aqi <= 300) return 'very_unhealthy';
    return 'hazardous';
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è AQI —Å—Ç–∞—Ç—É—Å–∞
  getAQIColor(status: AirQualityData['status']): string {
    const colors = {
      good: '#4CAF50',
      moderate: '#FFEB3B',
      unhealthy_sg: '#FF9800',
      unhealthy: '#F44336',
      very_unhealthy: '#9C27B0',
      hazardous: '#8BC34A',
    };
    return colors[status] || '#666';
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞
  getAQIDescription(status: AirQualityData['status']): string {
    const descriptions = {
      good: 'Good - Air quality is satisfactory',
      moderate: 'Moderate - Acceptable for most people',
      unhealthy_sg: 'Unhealthy for Sensitive Groups',
      unhealthy: 'Unhealthy - Everyone may experience effects',
      very_unhealthy: 'Very Unhealthy - Health warning',
      hazardous: 'Hazardous - Emergency conditions',
    };
    return descriptions[status] || 'Unknown status';
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –≤–æ–∑–¥—É—Ö–∞
  getAQIRecommendations(status: AirQualityData['status']): string[] {
    const recommendations = {
      good: [
        'Perfect day for outdoor activities! üåü',
        'Great time for jogging or cycling',
        'Windows can be opened for fresh air'
      ],
      moderate: [
        'Generally safe for outdoor activities',
        'Sensitive people should consider limiting extended outdoor exertion',
        'Good day for most outdoor plans'
      ],
      unhealthy_sg: [
        'Sensitive groups should reduce outdoor activities',
        'Consider wearing a mask outdoors',
        'Keep windows closed'
      ],
      unhealthy: [
        'Limit outdoor activities for everyone',
        'Wear protective masks when going outside',
        'Consider air purifiers indoors'
      ],
      very_unhealthy: [
        'Avoid outdoor activities',
        'Stay indoors with air purification',
        'Seek medical attention if feeling unwell'
      ],
      hazardous: [
        'Emergency conditions - stay indoors!',
        'Seal windows and doors',
        'Use air purifiers if available'
      ],
    };
    return recommendations[status] || ['No recommendations available'];
  }
}

export default new EnvironmentalDataService(); 